#include <stdio.h>
#include <stdlib.h>
#include "buffer.h"
#include "fftr/kiss_fftr.h"

int createBuffer(){
	printf("Creating buffer with %d channels and %d samples\n ",N_PIR,N_SAMPLES);
	int i;
	for(i = 0; i<N_PIR;i++ )
	{
		currentSample[i] = 0;
		ready = 0;
		
	}
	return 1;
}

int addInBuffer(int channel, int value){
	printf("Adding value\n");
	channels[channel][currentSample[channel]]=(kiss_fft_scalar) value;
	currentSample[channel]++;
	
	
	if(currentSample[channel]>=RINGBUFFER_SIZE){
		currentSample[channel]=0;
	}
	if(channel == (N_PIR-1)){
		last_FFT++;
		if(ready == 0 && currentSample[channel] > N_SAMPLES){
			ready = 1;
		}
	}
	if(ready == 1 && last_FFT >= N_BEFOR_FFT){
		return 1;
	}
	return 0;
}

void getBuffer(kiss_fft_scalar** values){
	int start = first;
	first += N_BEFOR_FFT;
	int i;
	int j;
	last_FFT = 0;
	for(i = 0; i < N_PIR ; i++){
		for(j = 0; j < N_SAMPLES ; j++){
			start += j;
			if(start > RINGBUFFER_SIZE){
				start = 0;
			}
		values[i][j]=channels[i][(start + j) % RINGBUFFER_SIZE];
		}
	}
}

int Oldmain (int argc, char *argv[]) 

{
	int fd[nbrChannels], ret; 
	int j, i, value; 
	char buffer[60]; 
	for (j=0;j<nbrChannels;j++){ 
		sprintf (buffer, "/sys/devices/ocp.2/helper.14/AIN%d", j); 
		printf("%s\n",buffer); 
		fd[j] = open(buffer, O_RDONLY); 
	} 
	createBuffer();
	while(1){
		for (j=0;j<nbrChannels;j++){ 
			ret = read(fd[j], buffer, sizeof(buffer)); 
			if (ret == -1) { 
				printf("Error reading device AIN%d \n", j); 
			}else{                         
				printf("Reading");
				buffer[ret] = 0; 
				addInBuffer(j,atoi(buffer)); 
				lseek(fd[j], 0, 0);  
			} 
		} 


	}

	for (j=0;j<nbrChannels;j++){ 
			close(fd[j]); 
	} 
	exit (0); 
}


