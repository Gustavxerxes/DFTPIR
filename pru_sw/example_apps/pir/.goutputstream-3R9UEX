

.origin 0
.entrypoint AXIS_PIR



//#include "PRU_memAcc_DDR_sharedRAM.hp"
#include "SPI.hp"

#define CONST_PRUCFG         C4
#define CONST_PRUSHAREDRAM   C28
#define PRU0_CTRL            0x22000
#define PRU1_CTRL            0x24000
#define CTPPR0               0x28
#define OWN_RAM              0x000
#define OTHER_RAM            0x020
#define SHARED_RAM           0x100
#define PRU0_ARM_INTERRUPT      19
#define PRU1_ARM_INTERRUPT      20
#define ARM_PRU0_INTERRUPT      21
#define ARM_PRU1_INTERRUPT      22


#define NUM_CHANNELS	4 


.macro SEND_WORD
	SBCO      r8, CONST_PRUSHAREDRAM, 0, 2*NUM_CHANNELS
	MOV       r31.b0, PRU1_ARM_INTERRUPT+16
	
.endm

AXIS_PIR:

 
/*Magic stuff, see http://www.embedded-things.com/bbb/understanding-bbb-pru-shared-memory-access */
	LBCO    r0, CONST_PRUCFG, 4, 4         
	CLR     r0, r0, 4
	SBCO    r0, CONST_PRUCFG, 4, 4
	MOV		r0, SHARED_RAM                
	MOV     r1, PRU1_CTRL + CTPPR0
	SBBO    r0, r1, 0, 4

	LDI r6, 0xffff // load loop count
	
	LDI r1.b0, NUM_CHANNELS  
	LDI r3.w0, 0x1000 // this is needed to increment channels
	
	SEND_LOOP:
		
		LDI SPI_TX, 0xC000 //reset command for each loop
		LDI r1.b3, 36 //this will make r1.w2 point to register r9
		

		CHANNEL_LOOP:
			SPI_XFER_WORD //send command and get data

			ADD r1.b1, r1.b1, 1 //updating loop count 
			MVIW *r1.b3, SPI_RX // move recieved data to r9...(r9+NUM_CHANNELS)/2  (since there are 2 words in each register)
			ADD r1.w2, r1.w2, 2 //update pointer
			DEL 30  //delay around 300ns
			ADD SPI_TX, SPI_TX, r3.w0// go to next channel
			ADD 
			QBNE CHANNEL_LOOP, r1.b1, r1.b0  
			
		DEL 0xffff
		SUB r6, r6, 1

	QBNE SEND_LOOP, r6, 0x0
	
	

	MOV       r31.b0, PRU1_ARM_INTERRUPT+16






    // Halt the processor
    HALT


