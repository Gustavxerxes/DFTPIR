#include "kiss_fftr.h"
#include "_kiss_fft_guts.h"
#include <sys/times.h>
#include <time.h>
#include <unistd.h>

static double cputime(void)
{
    struct tms t;
    times(&t);
    return (double)(t.tms_utime + t.tms_stime)/  sysconf(_SC_CLK_TCK) ;
}

static
kiss_fft_scalar rand_scalar(void) 
{
    kiss_fft_scalar s = (kiss_fft_scalar)(rand() -RAND_MAX/2);
    return s/2;
}

static
double snr_compare( kiss_fft_cpx * vec1,kiss_fft_cpx * vec2, int n)
{
    int k;
    double sigpow=1e-10,noisepow=1e-10,err,snr,scale=0;

    for (k=0;k<n;++k) {
        sigpow += (double)vec1[k].r * (double)vec1[k].r + 
                  (double)vec1[k].i * (double)vec1[k].i;
        err = (double)vec1[k].r - (double)vec2[k].r;
        noisepow += err * err;
        err = (double)vec1[k].i - (double)vec2[k].i;
        noisepow += err * err;

        if (vec1[k].r)
            scale +=(double) vec2[k].r / (double)vec1[k].r;
    }   
    snr = 10*log10( sigpow / noisepow );
    scale /= n;
    if (snr<10) {
        printf( "\npoor snr, try a scaling factor %f\n" , scale );
        exit(1);
    }
    return snr;
}

#ifndef NUMFFTS
#define NUMFFTS 10000
#endif


int main(int argc,char ** argv)
{
    int nfft = 8*3*5;
    double ts,trfft;
    int i;
    if (argc>1)
        nfft = atoi(argv[1]);

    kiss_fft_cpx cout[nfft];
    kiss_fft_cpx sout[nfft];

    kiss_fftr_cfg  kiss_fftr_state;

    kiss_fft_scalar rin[nfft+2];

    kiss_fft_scalar zero;
    memset(&zero,0,sizeof(zero) ); // ugly way of setting short,int,float,double, or __m128 to zero

    srand(time(0));

    for (i=0;i<nfft;++i) {
        rin[i] = rand_scalar();
    }

    
    kiss_fftr_state = kiss_fftr_alloc(nfft,0,0,0);
    
    kiss_fftr(kiss_fftr_state,rin,sout);
   
        
    printf( "nfft=%d, inverse=%d, snr=%g\n",
            nfft,0, snr_compare(cout,sout,(nfft/2)+1) );
    
    ts = cputime();
    for (i=0;i<NUMFFTS;++i) {
        kiss_fftr( kiss_fftr_state, rin, cout );
      
    }
    trfft = cputime() - ts;

    printf("%d complex ffts took %gs, real took %gs\n",NUMFFTS,tfft,trfft);

    free(kiss_fft_state);
    free(kiss_fftr_state);

    kiss_fft_state = kiss_fft_alloc(nfft,1,0,0);
    kiss_fftr_state = kiss_fftr_alloc(nfft,1,0,0);

    memset(cin,0,sizeof(cin));
   // conjugate symmetry of real signal 
 
   
    printf( "nfft=%d, inverse=%d, snr=%g\n",
            nfft,1, snr_compare(cout,sout,nfft/2) );

    free(kiss_fftr_state);

    return 0;
}
